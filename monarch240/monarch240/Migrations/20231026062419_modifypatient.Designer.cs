// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using monarch240.Models;

#nullable disable

namespace monarch240.Migrations
{
    [DbContext(typeof(DbaccessContext))]
    [Migration("20231026062419_modifypatient")]
    partial class modifypatient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("monarch240.Models.DrAbsCal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdWaveP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("AdWaveS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("次数");

                    b.Property<string>("Pvalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PValue");

                    b.Property<byte?>("StdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("StdID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("标准液序号");

                    b.Property<string>("Svalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SValue");

                    b.Property<int?>("TestCupNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("杯号");

                    b.Property<int?>("TestCyc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("圈数");

                    b.Property<DateTime?>("TestDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("检测日期");

                    b.Property<int?>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试号");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("检测时间");

                    b.Property<short?>("ValueFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("AD数据的判断标志");

                    b.HasKey("Id")
                        .HasName("DR_Abs_Cal$PrimaryKey");

                    b.HasIndex(new[] { "TestDate", "TestName", "StdId", "Count", "TestCyc" }, "DR_Abs_Cal$TestID");

                    b.HasIndex(new[] { "TestName", "StdId", "Count", "TestCyc" }, "DR_Abs_Cal$a");

                    b.ToTable("DR_Abs_Cal", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAbsDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdWaveP")
                        .HasColumnType("int");

                    b.Property<int?>("AdWaveS")
                        .HasColumnType("int");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pvalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PValue");

                    b.Property<bool?>("SerumFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<string>("Svalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SValue");

                    b.Property<int?>("TestCupNo")
                        .HasColumnType("int")
                        .HasComment("杯号");

                    b.Property<int?>("TestCyc")
                        .HasColumnType("int")
                        .HasComment("圈数:测光点");

                    b.Property<DateTime?>("TestDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("检测日期");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID")
                        .HasComment("测试号");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestName1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TestNo")
                        .HasColumnType("int");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("检测时间");

                    b.Property<short?>("ValueFlag")
                        .HasColumnType("smallint")
                        .HasComment("AD数据的判断标志");

                    b.HasKey("Id")
                        .HasName("DR_Abs_Data$PrimaryKey");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName", "TestCyc", "SerumFlag" }, "DR_Abs_Data$TestID");

                    b.ToTable("DR_Abs_Data", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAbsQc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdWaveP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("AdWaveS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("BatchID");

                    b.Property<byte?>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("次数");

                    b.Property<string>("Pvalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PValue");

                    b.Property<string>("QcName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Svalue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SValue");

                    b.Property<byte?>("TestAutoFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("默认0表示手工校准，自动分为定时校准1、批间校准或瓶间校准2；分类标志，默认0表示登记质控，做质控间隔时为1\n");

                    b.Property<int?>("TestCupNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("杯号");

                    b.Property<int?>("TestCyc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("圈数");

                    b.Property<DateTime?>("TestDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasComment("检测日期");

                    b.Property<int?>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试号");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("检测时间");

                    b.Property<short?>("ValueFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("AD数据的判断标志");

                    b.HasKey("Id")
                        .HasName("DR_Abs_QC$PrimaryKey");

                    b.HasIndex(new[] { "TestDate", "TestName", "BatchId", "QcName", "Count", "TestCyc", "TestAutoFlag" }, "DR_Abs_QC$TestID");

                    b.ToTable("DR_Abs_QC", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAgeUnit", b =>
                {
                    b.Property<string>("AgeHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Age_HotKey");

                    b.Property<short?>("AgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Age_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AgeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Age_Name");

                    b.HasIndex(new[] { "AgeHotKey" }, "DR_Age_Unit$HotKey");

                    b.HasIndex(new[] { "AgeName" }, "DR_Age_Unit$Name")
                        .IsUnique()
                        .HasFilter("[Age_Name] IS NOT NULL");

                    b.ToTable("DR_Age_Unit", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAgerangeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age1")
                        .HasColumnType("int");

                    b.Property<int?>("Age2")
                        .HasColumnType("int");

                    b.Property<string>("Fh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FH");

                    b.Property<string>("Fl")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FL");

                    b.Property<string>("Mh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MH");

                    b.Property<string>("Ml")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ML");

                    b.Property<int?>("SampleType")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("DR_AGERANGE_INFO$Index_36E57DAC_90FC_43B8");

                    b.ToTable("DR_AGERANGE_INFO", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAgetohour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Relationship")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("DR_AGETOHOUR$Index_38EC738E_945A_499A");

                    b.ToTable("DR_AGETOHOUR", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAlarm", b =>
                {
                    b.Property<int>("AlaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ala_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlaId"));

                    b.Property<string>("AlaCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ala_Code");

                    b.Property<string>("AlaLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ala_Level");

                    b.Property<string>("AlaName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ala_Name");

                    b.Property<DateTime?>("AlaTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Ala_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsHide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("AlaId")
                        .HasName("DR_Alarm$PrimaryKey");

                    b.HasIndex(new[] { "AlaCode" }, "DR_Alarm$Code");

                    b.ToTable("DR_Alarm", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAlarmInfo", b =>
                {
                    b.Property<int>("AlaId")
                        .HasColumnType("int")
                        .HasColumnName("Ala_ID");

                    b.Property<string>("AlaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ala_Code");

                    b.Property<string>("AlaDescribe")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ala_Describe");

                    b.Property<string>("AlaLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ala_Level");

                    b.Property<string>("AlaName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ala_Name");

                    b.Property<string>("AlaPlan")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ala_Plan");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("AlaId")
                        .HasName("DR_Alarm_Info$PrimaryKey");

                    b.HasIndex(new[] { "AlaCode" }, "DR_Alarm_Info$Ala_Code");

                    b.ToTable("DR_Alarm_Info", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAnaPara", b =>
                {
                    b.Property<int>("AnaTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Test_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnaTestId"));

                    b.Property<int?>("AnaAbsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Abs_Type")
                        .HasDefaultValueSql("((0))")
                        .HasComment("反应界限吸光度类型");

                    b.Property<string>("AnaClass1Abs")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Class1_Abs")
                        .HasComment("Class1的反应界限吸光度");

                    b.Property<string>("AnaClass1Dec1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Dec1")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass1Dec2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Dec2")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass1Dec3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Dec3")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass1Inc1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Inc1")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass1Inc2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Inc2")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass1Inc3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Inc3")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass1Nor1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Nor1")
                        .HasComment("样品杯常量时，类别1需稀释的样品量");

                    b.Property<string>("AnaClass1Nor2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Nor2")
                        .HasComment("样品杯常量时，类别1稀释后分析用的样品量");

                    b.Property<string>("AnaClass1Nor3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class1_Nor3")
                        .HasComment("样品杯常量时，类别1稀释液的量");

                    b.Property<string>("AnaClass1Prozone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Class1_Prozone")
                        .HasComment("Class1的前带界限值");

                    b.Property<string>("AnaClass2Abs")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Class2_Abs")
                        .HasComment("Class2的反应界限吸光度");

                    b.Property<string>("AnaClass2Dec1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Dec1")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass2Dec2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Dec2")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass2Dec3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Dec3")
                        .HasComment("减量时......");

                    b.Property<string>("AnaClass2Inc1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Inc1")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass2Inc2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Inc2")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass2Inc3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Inc3")
                        .HasComment("增量时......");

                    b.Property<string>("AnaClass2Nor1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Nor1")
                        .HasComment("样品杯常量时，类别2需稀释的样品量");

                    b.Property<string>("AnaClass2Nor2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Nor2")
                        .HasComment("样品杯常量时，类别2稀释后测试用的样品量");

                    b.Property<string>("AnaClass2Nor3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Class2_Nor3")
                        .HasComment("样品杯常量时，类别2稀释液的量");

                    b.Property<string>("AnaClass2Prozone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Class2_Prozone")
                        .HasComment("Class2的前带界限值");

                    b.Property<short?>("AnaDiluentPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Diluent_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释液的位置");

                    b.Property<short?>("AnaFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0,无参数,1有参数");

                    b.Property<string>("AnaParaMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("AnaPositionR1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Position_R1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R1的位置");

                    b.Property<short?>("AnaPositionR2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Position_R2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R2的位置");

                    b.Property<short?>("AnaPositionR3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Position_R3")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R3的位置");

                    b.Property<short?>("AnaPositionR4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Position_R4")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R4的位置");

                    b.Property<int?>("AnaProzoneType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Prozone_Type")
                        .HasDefaultValueSql("((0))")
                        .HasComment("前带界限类型");

                    b.Property<bool?>("AnaSerum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Ana_Serum")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AnaTestDigits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Test_Digits")
                        .HasDefaultValueSql("((0))")
                        .HasComment("小数位数");

                    b.Property<string>("AnaTestFactorA")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Test_FactorA")
                        .HasComment("仪器因数a");

                    b.Property<string>("AnaTestFactorB")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Test_FactorB")
                        .HasComment("仪器因数b");

                    b.Property<int?>("AnaTestMeans")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Test_Means")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试方法");

                    b.Property<string>("AnaTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Test_Name")
                        .HasComment("测试项目名称");

                    b.Property<short?>("AnaTestPoint1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Test_Point1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试点1");

                    b.Property<short?>("AnaTestPoint2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Test_Point2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试点2");

                    b.Property<short?>("AnaTestPoint3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Test_Point3")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试点3");

                    b.Property<short?>("AnaTestPoint4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Test_Point4")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试点4");

                    b.Property<string>("AnaTestQcTimes")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Ana_Test_QcTimes")
                        .HasComment("质控品间隔");

                    b.Property<string>("AnaTestReportName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Ana_Test_ReportName")
                        .HasComment("报告单名称");

                    b.Property<string>("AnaTestTime")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("Ana_Test_Time")
                        .HasComment("测试时间");

                    b.Property<int?>("AnaTestType1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Test_Type1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本类型1");

                    b.Property<int?>("AnaTestType2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Test_Type2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本类型2");

                    b.Property<string>("AnaTestUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ana_Test_Unit")
                        .HasComment("单位");

                    b.Property<short?>("AnaTwinPoint1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Twin_Point1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("后半项目测光点1");

                    b.Property<short?>("AnaTwinPoint2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Twin_Point2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("后半项目测光点2");

                    b.Property<short?>("AnaTwinPoint3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Twin_Point3")
                        .HasDefaultValueSql("((0))")
                        .HasComment("后半项目测光点3");

                    b.Property<short?>("AnaTwinPoint4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Twin_Point4")
                        .HasDefaultValueSql("((0))")
                        .HasComment("后半项目测光点4");

                    b.Property<string>("AnaTwinTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ana_Twin_Test")
                        .HasComment("双项目分析后半项目");

                    b.Property<short?>("AnaVolumeR1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Volume_R1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R1的试剂量");

                    b.Property<int?>("AnaVolumeR1dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Volume_R1Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AnaVolumeR2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Volume_R2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R2的试剂量");

                    b.Property<int?>("AnaVolumeR2dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Volume_R2Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AnaVolumeR3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Volume_R3")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R3的试剂量");

                    b.Property<int?>("AnaVolumeR3dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Volume_R3Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AnaVolumeR4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_Volume_R4")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R4的试剂量");

                    b.Property<int?>("AnaVolumeR4dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ana_Volume_R4Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("AnaWaveP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_WaveP")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试主波长");

                    b.Property<short?>("AnaWaveS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ana_WaveS")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试副波长");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DiluentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("AnaTestId")
                        .HasName("DR_AnaPara$PrimaryKey");

                    b.HasIndex(new[] { "AnaTestName" }, "DR_AnaPara$Ana_Test_Name")
                        .IsUnique()
                        .HasFilter("[Ana_Test_Name] IS NOT NULL");

                    b.ToTable("DR_AnaPara", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrAssessor", b =>
                {
                    b.Property<short>("AssId")
                        .HasColumnType("smallint")
                        .HasColumnName("Ass_ID");

                    b.Property<string>("AssHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ass_HotKey");

                    b.Property<string>("AssName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Ass_Name");

                    b.HasKey("AssId")
                        .HasName("DR_Assessor$PrimaryKey");

                    b.HasIndex(new[] { "AssId" }, "DR_Assessor$Code");

                    b.HasIndex(new[] { "AssName" }, "DR_Assessor$Doctor0")
                        .IsUnique()
                        .HasFilter("[Ass_Name] IS NOT NULL");

                    b.HasIndex(new[] { "AssHotKey" }, "DR_Assessor$HotKey");

                    b.ToTable("DR_Assessor", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrBarName", b =>
                {
                    b.Property<string>("BarCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Bar_Code");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BarEname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Bar_EName");

                    b.HasKey("BarCode")
                        .HasName("DR_Bar_Name$PrimaryKey");

                    b.HasIndex(new[] { "BarEname" }, "DR_Bar_Name$EName");

                    b.ToTable("DR_Bar_Name", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrBarcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("barcode");

                    b.HasKey("Id")
                        .HasName("DR_Barcode$PrimaryKey");

                    b.HasIndex(new[] { "Barcode" }, "DR_Barcode$barcode");

                    b.ToTable("DR_Barcode", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrBoYuan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("BFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("bFlag")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SampleType")
                        .HasColumnType("int");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<DateTime?>("TestDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("TestValue")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("DR_BoYuan$Index_3194FA6E_BF7D_45E7");

                    b.ToTable("DR_BoYuan", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Analysis")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释后分析用的样本量");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1、空白 2、量程 3、两点 4、全点");

                    b.Property<byte?>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试次数");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))");

                    b.Property<short?>("DilPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Dil_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释液位置");

                    b.Property<short?>("Diluent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释液量");

                    b.Property<bool?>("Dilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Disk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("盘号");

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1申请、2测试、3完成");

                    b.Property<short?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("位置");

                    b.Property<short?>("Reg1Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg1Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂1位置");

                    b.Property<short?>("Reg1Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂1吸量");

                    b.Property<short?>("Reg2Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg2Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂2位置");

                    b.Property<short?>("Reg2Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂2吸量");

                    b.Property<short?>("Reg3Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg3Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂3位置");

                    b.Property<short?>("Reg3Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂3吸量");

                    b.Property<short?>("Reg4Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg4Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂4位置");

                    b.Property<short?>("Reg4Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂4吸量");

                    b.Property<string>("Sample")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((0))")
                        .HasComment("正常样本量(稀释用的样本量)");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<byte?>("StdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("StdID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("标准液序号");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Test_Name")
                        .HasComment("校准项目名");

                    b.Property<string>("Time")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("DR_Cal_App$PrimaryKey");

                    b.HasIndex(new[] { "Flag" }, "DR_Cal_App$Cal_Flag");

                    b.HasIndex(new[] { "TestName" }, "DR_Cal_App$Cal_Test");

                    b.HasIndex(new[] { "CalType" }, "DR_Cal_App$Cal_Type");

                    b.HasIndex(new[] { "Id" }, "DR_Cal_App$ID")
                        .IsUnique();

                    b.HasIndex(new[] { "Position" }, "DR_Cal_App$Position");

                    b.HasIndex(new[] { "StdId" }, "DR_Cal_App$StdID");

                    b.ToTable("DR_Cal_App", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalAuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short?>("AllTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("All_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("全点校准超时");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("BlankTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Blank_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("空白校准超时");

                    b.Property<int?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("SetFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Set_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("定时标志");

                    b.Property<DateTime?>("SetTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Set_Time")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("计时的时间");

                    b.Property<short?>("SpanTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Span_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("量程校准超时");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short?>("TwoTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Two_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("两点校准超时");

                    b.HasKey("Id")
                        .HasName("DR_Cal_Auto$PrimaryKey");

                    b.HasIndex(new[] { "TestName" }, "DR_Cal_Auto$TestName")
                        .IsUnique()
                        .HasFilter("[TestName] IS NOT NULL");

                    b.ToTable("DR_Cal_Auto", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalFiftyCount", b =>
                {
                    b.Property<int>("CalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CValue")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("C_VALUE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿值(mmol/L)");

                    b.Property<string>("CalA")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_A")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalB")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_B")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalC")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_C")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalFactor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_Factor")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("CalFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1、申请 2、测试 3、完成");

                    b.Property<string>("CalS1abs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_S1Abs")
                        .HasDefaultValueSql("((0))");

                    b.Property<float?>("CalStd11")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD11");

                    b.Property<float?>("CalStd12")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD12");

                    b.Property<float?>("CalStd21")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD21");

                    b.Property<float?>("CalStd22")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD22");

                    b.Property<float?>("CalStd31")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD31");

                    b.Property<float?>("CalStd32")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD32");

                    b.Property<float?>("CalStd41")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD41");

                    b.Property<float?>("CalStd42")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD42");

                    b.Property<float?>("CalStd51")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD51");

                    b.Property<float?>("CalStd52")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD52");

                    b.Property<float?>("CalStd61")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD61");

                    b.Property<float?>("CalStd62")
                        .HasColumnType("real")
                        .HasColumnName("Cal_STD62");

                    b.Property<bool?>("CalSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Cal_Success")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test_Name")
                        .HasComment("项目名字");

                    b.Property<DateTime?>("CalTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Cal_Time")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("检准时间");

                    b.Property<string>("IsConc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液浓度(测定值)(mmol/L)");

                    b.Property<string>("IsEmf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液电位(mV)");

                    b.Property<string>("R1Obs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R1_OBS")
                        .HasDefaultValueSql("('')")
                        .HasComment("R1稳定使用期限");

                    b.Property<string>("R1Rb")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R1_RB")
                        .HasDefaultValueSql("('')")
                        .HasComment("R1瓶号");

                    b.Property<string>("R2Obs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R2_OBS")
                        .HasDefaultValueSql("('')")
                        .HasComment("R2稳定使用期限");

                    b.Property<string>("R2Rb")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R2_RB")
                        .HasDefaultValueSql("('')")
                        .HasComment("R2瓶号");

                    b.Property<string>("R3Obs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R3_OBS")
                        .HasDefaultValueSql("('')")
                        .HasComment("R3稳定使用期限");

                    b.Property<string>("R3Rb")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R3_RB")
                        .HasDefaultValueSql("('')")
                        .HasComment("R3瓶号");

                    b.Property<string>("R4Obs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R4_OBS")
                        .HasDefaultValueSql("('')")
                        .HasComment("R4稳定使用期限");

                    b.Property<string>("R4Rb")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R4_RB")
                        .HasDefaultValueSql("('')")
                        .HasComment("R4瓶号");

                    b.Property<string>("S1Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S1_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("低浓度斜率液电位(mV)");

                    b.Property<string>("S2Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S2_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("高浓度斜率液电位(mV)");

                    b.Property<string>("S3Conc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿液浓度测定值(mmol/L)");

                    b.Property<string>("S3Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿电位(mV)");

                    b.Property<string>("Slope")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SLOPE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("斜率(mV)");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasComment("操作员");

                    b.HasKey("CalId")
                        .HasName("DR_Cal_FiftyCount$PrimaryKey");

                    b.HasIndex(new[] { "CalId" }, "DR_Cal_FiftyCount$Cal_ID");

                    b.HasIndex(new[] { "CalFlag" }, "DR_Cal_FiftyCount$Call_Flag");

                    b.ToTable("DR_Cal_FiftyCount", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalPara", b =>
                {
                    b.Property<int>("CalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("CalAllTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_All_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("全点校准超时");

                    b.Property<short?>("CalBlankTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Blank_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("空白校准超时");

                    b.Property<string>("CalCalibrateName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Calibrate_Name")
                        .HasComment("项目名字");

                    b.Property<int?>("CalCalibrateType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Calibrate_Type")
                        .HasDefaultValueSql("((0))")
                        .HasComment("校准方法");

                    b.Property<string>("CalConc1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalConc2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalConc3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc3")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalConc4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc4")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalConc5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc5")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalConc6")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc6")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalDilVol1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol1");

                    b.Property<string>("CalDilVol2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol2");

                    b.Property<string>("CalDilVol3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol3");

                    b.Property<string>("CalDilVol4")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol4");

                    b.Property<string>("CalDilVol5")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol5");

                    b.Property<string>("CalDilVol6")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Dil_Vol6");

                    b.Property<string>("CalDiluent1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent1");

                    b.Property<string>("CalDiluent2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent2");

                    b.Property<string>("CalDiluent3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent3");

                    b.Property<string>("CalDiluent4")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent4");

                    b.Property<string>("CalDiluent5")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent5");

                    b.Property<string>("CalDiluent6")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Diluent6");

                    b.Property<int?>("CalDisk1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk1")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalDisk2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk2")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalDisk3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk3")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalDisk4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk4")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalDisk5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk5")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalDisk6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Disk6")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalDuplicateLimit2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Duplicate_Limit2")
                        .HasComment("允许偏差吸光度");

                    b.Property<short?>("CalFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0,无校准参数,1,有校准参数");

                    b.Property<string>("CalIsozymeQ")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_IsozymeQ")
                        .HasComment("灵敏度检查上限");

                    b.Property<short?>("CalPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Point")
                        .HasDefaultValueSql("((0))")
                        .HasComment("校准点");

                    b.Property<int?>("CalPosition1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position1")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalPosition2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position2")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalPosition3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position3")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalPosition4")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position4")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalPosition5")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position5")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CalPosition6")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_Position6")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalS1absH")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_S1Abs_H")
                        .HasComment("第一标准液允许吸光度上限");

                    b.Property<string>("CalS1absL")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_S1Abs_L")
                        .HasComment("第一标准液允许吸光度下限");

                    b.Property<string>("CalSample1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample1");

                    b.Property<string>("CalSample2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample2");

                    b.Property<string>("CalSample3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample3");

                    b.Property<string>("CalSample4")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample4");

                    b.Property<string>("CalSample5")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample5");

                    b.Property<string>("CalSample6")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sample6");

                    b.Property<string>("CalSdlimit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_SDLimit")
                        .HasComment("允许收敛吸光度");

                    b.Property<string>("CalSensilivityL")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Sensilivity_L")
                        .HasComment("灵敏度检查下限");

                    b.Property<short?>("CalSpan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Span")
                        .HasDefaultValueSql("((0))")
                        .HasComment("量程点");

                    b.Property<short?>("CalSpanTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Span_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("量程校准超时");

                    b.Property<string>("CalTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test_Name")
                        .HasComment("校准项目");

                    b.Property<short?>("CalTwoTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Two_Timeout")
                        .HasDefaultValueSql("((0))")
                        .HasComment("两点校准超时");

                    b.Property<short?>("CalUseCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Use_Count")
                        .HasDefaultValueSql("((0))")
                        .HasComment("使用了几个标准液参数");

                    b.Property<short?>("CalWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Weight")
                        .HasDefaultValueSql("((0))")
                        .HasComment("加权系数");

                    b.HasKey("CalId")
                        .HasName("DR_CalPara$PrimaryKey");

                    b.HasIndex(new[] { "CalTestName" }, "DR_CalPara$Cal_Test_Name")
                        .IsUnique()
                        .HasFilter("[Cal_Test_Name] IS NOT NULL");

                    b.ToTable("DR_CalPara", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalResult", b =>
                {
                    b.Property<int>("CalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CValue")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("C_VALUE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿值(mmol/L)");

                    b.Property<string>("CalA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_A");

                    b.Property<string>("CalB")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_B");

                    b.Property<string>("CalC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_C");

                    b.Property<string>("CalFactor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_Factor")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("CalFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1、申请 2、测试 3、完成");

                    b.Property<string>("CalLot")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CalName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CalPara1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para3")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para4")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para5")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalS1abs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_S1Abs")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd11")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD11")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd12")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD12")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd21")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD21")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd22")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD22")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd31")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD31")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd32")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD32")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd41")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD41")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd42")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD42")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd51")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD51")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd52")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD52")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd61")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD61")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd62")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD62")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CalSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Cal_Success")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test_Name")
                        .HasComment("项目名字");

                    b.Property<bool?>("IsCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IsConc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液浓度(测定值)(mmol/L)");

                    b.Property<string>("IsEmf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液电位(mV)");

                    b.Property<string>("S1Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S1_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("低浓度斜率液电位(mV)");

                    b.Property<string>("S2Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S2_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("高浓度斜率液电位(mV)");

                    b.Property<string>("S3Conc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿液浓度测定值(mmol/L)");

                    b.Property<string>("S3Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿电位(mV)");

                    b.Property<DateTime?>("ShelfLife")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Slope")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SLOPE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("斜率(mV)");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("CalId")
                        .HasName("DR_CalResult$PrimaryKey");

                    b.HasIndex(new[] { "CalTestName" }, "DR_CalResult$Cal_Test_Name")
                        .IsUnique()
                        .HasFilter("[Cal_Test_Name] IS NOT NULL");

                    b.ToTable("DR_CalResult", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalResultBak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CValue")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("C_VALUE");

                    b.Property<string>("CalA")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_A");

                    b.Property<string>("CalB")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_B");

                    b.Property<string>("CalC")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_C");

                    b.Property<int?>("CalCalibrateType")
                        .HasColumnType("int")
                        .HasColumnName("Cal_Calibrate_Type");

                    b.Property<string>("CalConc1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc1");

                    b.Property<string>("CalConc2")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc2");

                    b.Property<string>("CalConc3")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc3");

                    b.Property<string>("CalConc4")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc4");

                    b.Property<string>("CalConc5")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc5");

                    b.Property<string>("CalConc6")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Conc6");

                    b.Property<string>("CalFactor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_Factor");

                    b.Property<int?>("CalFlag")
                        .HasColumnType("int")
                        .HasColumnName("Cal_Flag");

                    b.Property<string>("CalLot")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CalName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CalPara1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cal_Para1");

                    b.Property<string>("CalPara2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cal_Para2");

                    b.Property<string>("CalPara3")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cal_Para3");

                    b.Property<string>("CalPara4")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cal_Para4");

                    b.Property<string>("CalPara5")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Cal_Para5");

                    b.Property<int?>("CalPoint")
                        .HasColumnType("int")
                        .HasColumnName("Cal_Point");

                    b.Property<string>("CalS1abs")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_S1Abs");

                    b.Property<string>("CalStd11")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD11");

                    b.Property<string>("CalStd12")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD12");

                    b.Property<string>("CalStd21")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD21");

                    b.Property<string>("CalStd22")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD22");

                    b.Property<string>("CalStd31")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD31");

                    b.Property<string>("CalStd32")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD32");

                    b.Property<string>("CalStd41")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD41");

                    b.Property<string>("CalStd42")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD42");

                    b.Property<string>("CalStd51")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD51");

                    b.Property<string>("CalStd52")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD52");

                    b.Property<string>("CalStd61")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD61");

                    b.Property<string>("CalStd62")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_STD62");

                    b.Property<string>("CalSuccess")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Cal_Success");

                    b.Property<string>("CalTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test_Name");

                    b.Property<bool?>("IsCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IsConc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("IS_CONC");

                    b.Property<string>("IsEmf")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IS_EMF");

                    b.Property<string>("S1Emf")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("S1_EMF");

                    b.Property<string>("S2Emf")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("S2_EMF");

                    b.Property<string>("S3Conc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("S3_CONC");

                    b.Property<string>("S3Emf")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("S3_EMF");

                    b.Property<DateTime?>("ShelfLife")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Slope")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SLOPE");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("Id")
                        .HasName("DR_CalResult_Bak$Index_369A8FA6_2A5A_4CFC");

                    b.ToTable("DR_CalResult_Bak", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalResultTemp", b =>
                {
                    b.Property<int>("CalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CValue")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("C_VALUE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿值(mmol/L)");

                    b.Property<string>("CalA")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_A");

                    b.Property<string>("CalB")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_B");

                    b.Property<string>("CalC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_C");

                    b.Property<string>("CalFactor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_Factor")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("CalFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1、申请 2、测试 3、完成");

                    b.Property<string>("CalPara1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para3")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para4")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalPara5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cal_Para5")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalS1abs")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_S1Abs")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd11")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD11")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd12")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD12")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd21")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD21")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd22")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD22")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd31")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD31")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd32")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD32")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd41")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD41")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd42")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD42")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd51")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD51")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd52")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD52")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd61")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD61")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalStd62")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_STD62")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CalSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Cal_Success")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test_Name")
                        .HasComment("项目名字");

                    b.Property<string>("IsConc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液浓度(测定值)(mmol/L)");

                    b.Property<string>("IsEmf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IS_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("内标液电位(mV)");

                    b.Property<string>("S1Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S1_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("低浓度斜率液电位(mV)");

                    b.Property<string>("S2Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S2_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("高浓度斜率液电位(mV)");

                    b.Property<string>("S3Conc")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_CONC")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿液浓度测定值(mmol/L)");

                    b.Property<string>("S3Emf")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("S3_EMF")
                        .HasDefaultValueSql("((0))")
                        .HasComment("补偿电位(mV)");

                    b.Property<string>("Slope")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SLOPE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("斜率(mV)");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<int?>("Testid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testid")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CalId")
                        .HasName("DR_CalResult_Temp$PrimaryKey");

                    b.HasIndex(new[] { "CalTestName" }, "DR_CalResult_Temp$Cal_Test_Name")
                        .IsUnique()
                        .HasFilter("[Cal_Test_Name] IS NOT NULL");

                    b.HasIndex(new[] { "Testid" }, "DR_CalResult_Temp$testid");

                    b.ToTable("DR_CalResult_Temp", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("CalDilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("CalFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CalTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("校准项目名");

                    b.Property<int?>("CalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1、空白 2、量程 3、两点 4、全点");

                    b.Property<int?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ShelfLife")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("Id")
                        .HasName("DR_Cal_Test$PrimaryKey");

                    b.HasIndex(new[] { "CalTest" }, "DR_Cal_Test$Cal_Test");

                    b.HasIndex(new[] { "CalType" }, "DR_Cal_Test$Cal_Type");

                    b.HasIndex(new[] { "Id" }, "DR_Cal_Test$ID")
                        .IsUnique();

                    b.ToTable("DR_Cal_Test", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCalculate", b =>
                {
                    b.Property<int>("CalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cal_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CalFormula")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Cal_Formula");

                    b.Property<string>("CalName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Cal_Name");

                    b.Property<short?>("CalPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cal_Point")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalRangeH")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_RangeH")
                        .HasComment("参考范围高值");

                    b.Property<string>("CalRangeL")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_RangeL")
                        .HasComment("参考范围低值");

                    b.Property<string>("CalTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Test");

                    b.Property<string>("CalUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cal_Unit");

                    b.HasKey("CalId")
                        .HasName("DR_Calculate$PrimaryKey");

                    b.ToTable("DR_Calculate", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCheckDataTest", b =>
                {
                    b.Property<short>("CupNo")
                        .HasColumnType("smallint");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("C340")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c340")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C380")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c380")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C405")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c405")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C450")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c450")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C480")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c480")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C505")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c505")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C546")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c546")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C570")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c570")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C600")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c600")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C660")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c660")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C700")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c700")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C750")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c750")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<byte?>("UseCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("UseFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CupNo")
                        .HasName("DR_Check_Data_Test$PrimaryKey");

                    b.ToTable("DR_Check_Data_Test", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCheckDatum", b =>
                {
                    b.Property<short>("CupNo")
                        .HasColumnType("smallint");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("C340")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c340")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C380")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c380")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C405")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c405")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C450")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c450")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C480")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c480")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C505")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c505")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C546")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c546")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C570")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c570")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C600")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c600")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C660")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c660")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C700")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c700")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C750")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c750")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<byte?>("UseCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("UseFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CupNo")
                        .HasName("DR_Check_Data$PrimaryKey");

                    b.ToTable("DR_Check_Data", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCheckLight", b =>
                {
                    b.Property<short>("CupNo")
                        .HasColumnType("smallint");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("C340")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c340")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C380")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c380")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C405")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c405")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C450")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c450")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C480")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c480")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C505")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c505")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C546")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c546")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C570")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c570")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C600")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c600")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C660")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c660")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C700")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c700")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("C750")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("c750")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<DateTime?>("TestTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("UseCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("UseFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CupNo")
                        .HasName("DR_Check_Light$PrimaryKey");

                    b.ToTable("DR_Check_Light", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrChecker", b =>
                {
                    b.Property<string>("CheId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Che_ID");

                    b.Property<string>("CheHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Che_HotKey");

                    b.Property<bool?>("CheLoginFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Che_Login_Flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CheName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Che_Name");

                    b.Property<string>("ChePass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Che_Pass");

                    b.Property<int?>("ChePurview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Che_Purview")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("CheId")
                        .HasName("DR_Checker$PrimaryKey");

                    b.HasIndex(new[] { "CheId" }, "DR_Checker$Che_ID");

                    b.HasIndex(new[] { "CheHotKey" }, "DR_Checker$HotKey")
                        .IsUnique()
                        .HasFilter("[Che_HotKey] IS NOT NULL");

                    b.HasIndex(new[] { "CheName" }, "DR_Checker$Name");

                    b.ToTable("DR_Checker", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrClinic", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ID");

                    b.Property<string>("Clinic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Hotkey")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("DR_Clinic$PrimaryKey");

                    b.HasIndex(new[] { "Hotkey" }, "DR_Clinic$Hotkey")
                        .IsUnique()
                        .HasFilter("[Hotkey] IS NOT NULL");

                    b.HasIndex(new[] { "Id" }, "DR_Clinic$ID");

                    b.ToTable("DR_Clinic", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCountItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Absorbance")
                        .HasColumnType("float");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("CupBlank")
                        .HasColumnType("float");

                    b.Property<short?>("CupType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("杯类型");

                    b.Property<string>("DilSoluName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("Dilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释");

                    b.Property<short?>("Disk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("盘号");

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0申请、1测试、2完成");

                    b.Property<string>("Hint")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Ise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ISE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("是否使用ISE。0不使用。1使用。");

                    b.Property<short?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("位置");

                    b.Property<short?>("Print")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("是否复查该项目");

                    b.Property<double?>("ReAbsorbance")
                        .HasColumnType("float");

                    b.Property<double?>("ReCupBlank")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.Property<short?>("Rerun")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试次数");

                    b.Property<string>("RerunResult")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SampleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("SerumFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SerumResult")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<string>("TestCnName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TestDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("日期");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("测试项目名");

                    b.Property<string>("TestName1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TestNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本编号");

                    b.Property<string>("TestRange")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestResult")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("时间");

                    b.Property<short?>("TestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0、常规 1、急诊");

                    b.Property<string>("TestUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short?>("VolType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本体积");

                    b.HasKey("Id")
                        .HasName("DR_Count_Item$PrimaryKey");

                    b.HasIndex(new[] { "Flag", "Print" }, "DR_Count_Item$Flag");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName" }, "DR_Count_Item$a");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName1" }, "DR_Count_Item$b");

                    b.HasIndex(new[] { "TestResult" }, "DR_Count_Item$testresult");

                    b.ToTable("DR_Count_Item", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrCupType", b =>
                {
                    b.Property<string>("CupId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cup_ID");

                    b.Property<string>("CupHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Cup_HotKey");

                    b.Property<string>("CupType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cup_Type");

                    b.HasKey("CupId")
                        .HasName("DR_Cup_Type$PrimaryKey");

                    b.HasIndex(new[] { "CupHotKey" }, "DR_Cup_Type$Cup_HotKey")
                        .IsUnique()
                        .HasFilter("[Cup_HotKey] IS NOT NULL");

                    b.ToTable("DR_Cup_Type", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrDatabaseinfo", b =>
                {
                    b.Property<string>("DbiName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DBI_NAME");

                    b.Property<string>("DbiValue")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DBI_VALUE");

                    b.ToTable("DR_DATABASEINFO", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrDepartment", b =>
                {
                    b.Property<string>("DepId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Dep_ID");

                    b.Property<string>("DepHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Dep_HotKey");

                    b.Property<string>("DepName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Dep_Name");

                    b.HasKey("DepId")
                        .HasName("DR_Department$PrimaryKey");

                    b.HasIndex(new[] { "DepHotKey" }, "DR_Department$HotKey")
                        .IsUnique()
                        .HasFilter("[Dep_HotKey] IS NOT NULL");

                    b.ToTable("DR_Department", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrDilSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DilAnalysis")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Dil_Analysis");

                    b.Property<string>("DilDiluent")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Dil_Diluent");

                    b.Property<bool?>("DilIsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Dil_IsDefault")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DilSample")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Dil_Sample");

                    b.Property<int?>("DilSampleType")
                        .HasColumnType("int")
                        .HasColumnName("Dil_SampleType");

                    b.Property<string>("DilSoluName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Dil_SoluNAME");

                    b.Property<string>("DilTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Dil_TestName");

                    b.Property<int?>("DilVolType")
                        .HasColumnType("int")
                        .HasColumnName("Dil_VolType");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("Id")
                        .HasName("Dr_DilSolution$Index_45EE58DD_8C0A_4EBD");

                    b.ToTable("Dr_DilSolution", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrDoctor", b =>
                {
                    b.Property<string>("DocId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Doc_ID");

                    b.Property<string>("DocDepartment")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Doc_Department");

                    b.Property<string>("DocHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Doc_HotKey");

                    b.Property<string>("DocName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Doc_Name");

                    b.HasKey("DocId")
                        .HasName("DR_Doctor$PrimaryKey");

                    b.HasIndex(new[] { "DocHotKey" }, "DR_Doctor$HotKey")
                        .IsUnique()
                        .HasFilter("[Doc_HotKey] IS NOT NULL");

                    b.ToTable("DR_Doctor", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrItemUnit", b =>
                {
                    b.Property<int>("UniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Uni_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniId"));

                    b.Property<string>("UniHotkey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Uni_Hotkey");

                    b.Property<string>("UniItemUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Uni_Item_Unit");

                    b.HasKey("UniId")
                        .HasName("DR_Item_Unit$PrimaryKey");

                    b.ToTable("DR_Item_Unit", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrKparaInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Hpara")
                        .HasColumnType("float")
                        .HasColumnName("HPara");

                    b.Property<string>("ItemName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("Lpara")
                        .HasColumnType("float")
                        .HasColumnName("LPara");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<bool?>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id")
                        .HasName("DR_KParaInfo$Index_78134FE3_F27C_48A7");

                    b.ToTable("DR_KParaInfo", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrManualItem", b =>
                {
                    b.Property<int>("ManId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Man_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Man_Name");

                    b.Property<short?>("ManPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Man_Point")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ManRangeH")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Man_RangeH")
                        .HasComment("参考范围高值");

                    b.Property<string>("ManRangeL")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Man_RangeL")
                        .HasComment("参考范围低值");

                    b.Property<string>("ManTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Man_Test");

                    b.Property<string>("ManUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Man_Unit");

                    b.HasKey("ManId")
                        .HasName("DR_Manual_Item$PrimaryKey");

                    b.ToTable("DR_Manual_Item", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrNation", b =>
                {
                    b.Property<int>("NaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Na_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaId"));

                    b.Property<string>("NaHotKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Na_HotKey");

                    b.Property<string>("NaNation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Na_Nation");

                    b.HasKey("NaId")
                        .HasName("DR_Nation$PrimaryKey");

                    b.HasIndex(new[] { "NaHotKey" }, "DR_Nation$Pat_HotKey");

                    b.HasIndex(new[] { "NaId" }, "DR_Nation$id");

                    b.ToTable("DR_Nation", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrPatient", b =>
                {
                    b.Property<int>("PatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pat_ID")
                        .HasComment("唯一患者流水号");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatId"));

                    b.Property<bool?>("BFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("bFlag")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatAge")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_Age")
                        .HasComment("年龄");

                    b.Property<string>("PatAgeUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_AgeUnit")
                        .HasComment("年龄单位");

                    b.Property<string>("PatAssessor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pat_Assessor")
                        .HasComment("审核医师");

                    b.Property<short?>("PatAuditingInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_Auditing_Info")
                        .HasDefaultValueSql("((0))")
                        .HasComment("审核信息");

                    b.Property<byte?>("PatBarFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Pat_Bar_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0未扫描，1已扫描");

                    b.Property<string>("PatBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_Barcode")
                        .HasComment("样本条形码号");

                    b.Property<string>("PatBedNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_BedNo")
                        .HasComment("床号");

                    b.Property<string>("PatCaseNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_CaseNo")
                        .HasComment("病历号");

                    b.Property<string>("PatChecker")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pat_Checker")
                        .HasComment("检验医师");

                    b.Property<string>("PatClinic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Pat_Clinic")
                        .HasComment("临床诊断");

                    b.Property<short?>("PatCupType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_CupType")
                        .HasDefaultValueSql("((0))")
                        .HasComment("杯类型");

                    b.Property<bool?>("PatDilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Pat_Dilute")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释");

                    b.Property<string>("PatDisk")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_Disk")
                        .HasComment("样本盘");

                    b.Property<string>("PatDoctor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pat_Doctor")
                        .HasComment("送检医师");

                    b.Property<bool?>("PatFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Pat_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("是否急诊");

                    b.Property<string>("PatName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_Name")
                        .HasComment("姓名");

                    b.Property<string>("PatPosition")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_Position")
                        .HasComment("样本位置");

                    b.Property<short?>("PatPrintInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_Print_Info")
                        .HasDefaultValueSql("((0))")
                        .HasComment("打印信息");

                    b.Property<string>("PatProfile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pat_Profile")
                        .HasComment("组合项目");

                    b.Property<string>("PatProfileItems")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Pat_Profile_Items");

                    b.Property<string>("PatRemark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Pat_Remark")
                        .HasComment("备注信息");

                    b.Property<short?>("PatRepeatCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_Repeat_Count")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("PatReportDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Report_Date")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("报告日期");

                    b.Property<DateTime?>("PatReportTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Report_Time");

                    b.Property<short?>("PatResultInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_Result_Info")
                        .HasDefaultValueSql("((0))")
                        .HasComment("结果信息");

                    b.Property<string>("PatRoom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_Room")
                        .HasComment("科室");

                    b.Property<int?>("PatSampleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pat_Sample_Type")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本种类");

                    b.Property<DateTime?>("PatSamplingDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Sampling_Date");

                    b.Property<DateTime?>("PatSamplingTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Sampling_Time");

                    b.Property<DateTime?>("PatSendingDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Sending_Date")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("送检日期");

                    b.Property<DateTime?>("PatSendingTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Sending_Time");

                    b.Property<bool?>("PatSerumFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Pat_SerumFlag")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PatSex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_Sex")
                        .HasComment("性别");

                    b.Property<string>("PatStandBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_StandBy")
                        .HasComment("备用字段");

                    b.Property<int?>("PatTestNo")
                        .HasColumnType("int")
                        .HasColumnName("Pat_TestNo")
                        .HasComment("患者编号，同样本编号");

                    b.Property<DateTime?>("PatTestTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Test_Time")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(14)),(14)))");

                    b.Property<DateTime?>("PatTestingDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Pat_Testing_Date")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("检验日期");

                    b.Property<string>("PatType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pat_Type")
                        .HasComment("患者类型：常规、急诊");

                    b.Property<short?>("PatVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pat_Volume")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本体积");

                    b.HasKey("PatId")
                        .HasName("DR_Patient$PrimaryKey");

                    b.HasIndex(new[] { "PatTestingDate", "PatTestNo" }, "DR_Patient$pat_no");

                    b.ToTable("DR_Patient", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrPatientType", b =>
                {
                    b.Property<string>("PatId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pat_ID");

                    b.Property<string>("PatHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pat_HotKey")
                        .HasComment("助记符");

                    b.Property<string>("PatName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Pat_Name")
                        .HasComment("样本种类名");

                    b.HasKey("PatId")
                        .HasName("DR_Patient_Type$PrimaryKey");

                    b.HasIndex(new[] { "PatId" }, "DR_Patient_Type$Code");

                    b.HasIndex(new[] { "PatHotKey" }, "DR_Patient_Type$HotKey");

                    b.HasIndex(new[] { "PatName" }, "DR_Patient_Type$Sample0")
                        .IsUnique()
                        .HasFilter("[Pat_Name] IS NOT NULL");

                    b.ToTable("DR_Patient_Type", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrProfile", b =>
                {
                    b.Property<short>("ProId")
                        .HasColumnType("smallint")
                        .HasColumnName("Pro_ID");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_Name");

                    b.HasKey("ProId")
                        .HasName("DR_Profile$PrimaryKey");

                    b.HasIndex(new[] { "ProId" }, "DR_Profile$Pro_ID")
                        .IsUnique();

                    b.HasIndex(new[] { "ProName" }, "DR_Profile$Pro_Name");

                    b.ToTable("DR_Profile", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrProfileItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("PROFILE_ID");

                    b.Property<int?>("Typeid")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("DR_PROFILE_ITEM$Index_2A8A3A80_1518_42BD");

                    b.ToTable("DR_PROFILE_ITEM", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrProfileName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("Typeid")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("DR_PROFILE_NAME$Index_90C33AC9_4C45_4E13");

                    b.ToTable("DR_PROFILE_NAME", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrProfileTest", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pro_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_Name");

                    b.Property<string>("ProOrder")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pro_Order");

                    b.Property<string>("ProTest")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Pro_Test");

                    b.HasKey("ProId")
                        .HasName("DR_Profile_Test$PrimaryKey");

                    b.ToTable("DR_Profile_Test", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrQcDresult", b =>
                {
                    b.Property<int>("QcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Qc_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QcId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrintId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Print_Id");

                    b.Property<string>("QcBatchId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Qc_BatchID");

                    b.Property<int?>("QcCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Qc_Count")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("QcDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Qc_Date")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))");

                    b.Property<string>("QcDaySd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_DaySD");

                    b.Property<string>("QcDayX")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_DayX");

                    b.Property<string>("QcDeviation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_Deviation");

                    b.Property<int?>("QcDisk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Qc_Disk")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QcError")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_Error");

                    b.Property<byte?>("QcFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Qc_Flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("QcName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Qc_Name");

                    b.Property<string>("QcPosId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Qc_PosID");

                    b.Property<string>("QcResult")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_Result");

                    b.Property<string>("QcTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Qc_Test_Name");

                    b.Property<string>("QcTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Qc_Time");

                    b.HasKey("QcId")
                        .HasName("DR_QC_DResult$PrimaryKey");

                    b.HasIndex(new[] { "PrintId" }, "DR_QC_DResult$Print_Id");

                    b.HasIndex(new[] { "QcDate", "QcTestName", "QcBatchId", "QcName", "QcCount", "QcFlag" }, "DR_QC_DResult$Qc_Date");

                    b.HasIndex(new[] { "QcCount", "QcResult" }, "DR_QC_DResult$a");

                    b.ToTable("DR_QC_DResult", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrQcName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QcName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Qc_Name");

                    b.HasKey("Id")
                        .HasName("DR_Qc_Name$PrimaryKey");

                    b.ToTable("DR_Qc_Name", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrQcTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BatchID")
                        .HasComment("质控批号");

                    b.Property<string>("DaySd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DaySD");

                    b.Property<string>("DayX")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short?>("Disk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("盘号");

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0申请、1测试、2完成");

                    b.Property<string>("PosId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PosID")
                        .HasComment("位置");

                    b.Property<bool?>("QcFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("QcName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SampleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("质控项目名");

                    b.HasKey("Id")
                        .HasName("DR_QC_Test$PrimaryKey");

                    b.HasIndex(new[] { "BatchId" }, "DR_QC_Test$BatchID");

                    b.HasIndex(new[] { "Flag" }, "DR_QC_Test$Cal_Flag");

                    b.HasIndex(new[] { "TestName" }, "DR_QC_Test$Cal_Test");

                    b.HasIndex(new[] { "Id" }, "DR_QC_Test$ID");

                    b.HasIndex(new[] { "PosId" }, "DR_QC_Test$PosID");

                    b.ToTable("DR_QC_Test", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrRanPara", b =>
                {
                    b.Property<int>("RanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ran_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RanId"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("RanFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Ran_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0,无范围参数,1有范围参数");

                    b.Property<byte?>("RanSerAge1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age1")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清范围1年龄");

                    b.Property<byte?>("RanSerAge1End")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age1End")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RanSerAge1Fh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age1_FH")
                        .HasComment("血清范围1女高值");

                    b.Property<string>("RanSerAge1Fl")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age1_FL")
                        .HasComment("血清范围1女低值");

                    b.Property<string>("RanSerAge1Mh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age1_MH")
                        .HasComment("血清范围1男高值");

                    b.Property<string>("RanSerAge1Ml")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age1_ML")
                        .HasComment("血清范围1男低值");

                    b.Property<byte?>("RanSerAge2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age2")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清范围2年龄");

                    b.Property<byte?>("RanSerAge2End")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age2End")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RanSerAge2Fh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age2_FH")
                        .HasComment("血清范围2女高值");

                    b.Property<string>("RanSerAge2Fl")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age2_FL")
                        .HasComment("血清范围2女低值");

                    b.Property<string>("RanSerAge2Mh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age2_MH")
                        .HasComment("血清范围2男高值");

                    b.Property<string>("RanSerAge2Ml")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age2_ML")
                        .HasComment("血清范围2男低值");

                    b.Property<byte?>("RanSerAge3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age3")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清范围3年龄");

                    b.Property<byte?>("RanSerAge3End")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("Ran_Ser_Age3End")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RanSerAge3Fh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age3_FH")
                        .HasComment("血清范围3女高值");

                    b.Property<string>("RanSerAge3Fl")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age3_FL")
                        .HasComment("血清范围3女低值");

                    b.Property<string>("RanSerAge3Mh")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age3_MH")
                        .HasComment("血清范围3男高值");

                    b.Property<string>("RanSerAge3Ml")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Age3_ML")
                        .HasComment("血清范围3男低值");

                    b.Property<bool?>("RanSerDefFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Ran_Ser_Def_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清默认范围标志");

                    b.Property<string>("RanSerDefH")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_DefH")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清默认范围高");

                    b.Property<string>("RanSerDefL")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_DefL")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清默认范围低");

                    b.Property<string>("RanSerLineH")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Line_H")
                        .HasDefaultValueSql("((99999))")
                        .HasComment("血清线性范围高值");

                    b.Property<string>("RanSerLineL")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Ser_Line_L")
                        .HasDefaultValueSql("((-99999))")
                        .HasComment("血清线性范围低值");

                    b.Property<bool?>("RanSerRangeFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("Ran_Ser_Range_Flag")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清参考范围标志");

                    b.Property<int?>("RanSerType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ran_Ser_Type")
                        .HasDefaultValueSql("((0))")
                        .HasComment("血清类别");

                    b.Property<string>("RanTestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Ran_Test_Name")
                        .HasComment("检测项目");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.HasKey("RanId")
                        .HasName("DR_RanPara$PrimaryKey");

                    b.ToTable("DR_RanPara", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrReagent", b =>
                {
                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReaBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Rea_barcode");

                    b.Property<string>("ReaBottleNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Rea_Bottle_No")
                        .HasComment("试剂瓶号");

                    b.Property<string>("ReaBottleSize")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Rea_Bottle_Size")
                        .HasComment("试剂瓶的规格");

                    b.Property<string>("ReaDate")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Rea_Date")
                        .HasComment("试剂有效期");

                    b.Property<string>("ReaDays")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Rea_Days")
                        .HasComment("试剂有效天数");

                    b.Property<short?>("ReaDisk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Rea_Disk")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂盘号");

                    b.Property<int>("ReaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Rea_ID")
                        .HasComment("唯一试剂编号");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReaId"));

                    b.Property<string>("ReaLotNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Rea_Lot_No")
                        .HasComment("试剂批号");

                    b.Property<string>("ReaName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Rea_Name")
                        .HasComment("试剂名称");

                    b.Property<short?>("ReaPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Rea_Position")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂位置");

                    b.Property<string>("ReaRemain")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Rea_Remain")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂剩余量");

                    b.Property<string>("ReaStandby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Rea_Standby")
                        .HasComment("备用信息字段");

                    b.Property<short?>("ReaTimes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Rea_Times")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂剩余测试次数");

                    b.Property<string>("ReaType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Rea_Type")
                        .HasComment("试剂类型");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<bool?>("Use")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasIndex(new[] { "ReaBarcode" }, "DR_Reagent$Rea_barcode");

                    b.HasIndex(new[] { "ReaName" }, "DR_Reagent$Reagent_Name");

                    b.HasIndex(new[] { "ReaDisk", "ReaPosition" }, "DR_Reagent$a");

                    b.ToTable("DR_Reagent", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrRemark", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ID");

                    b.Property<string>("HotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("助记符");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("备注");

                    b.HasKey("Id")
                        .HasName("DR_Remark$PrimaryKey");

                    b.HasIndex(new[] { "Id" }, "DR_Remark$Code");

                    b.HasIndex(new[] { "HotKey" }, "DR_Remark$HotKey");

                    b.ToTable("DR_Remark", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrSampleType", b =>
                {
                    b.Property<string>("SamId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Sam_ID");

                    b.Property<string>("SamHotKey")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Sam_HotKey")
                        .HasComment("助记符");

                    b.Property<string>("SamName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Sam_Name")
                        .HasComment("样本种类名");

                    b.HasKey("SamId")
                        .HasName("DR_Sample_Type$PrimaryKey");

                    b.HasIndex(new[] { "SamId" }, "DR_Sample_Type$Code");

                    b.HasIndex(new[] { "SamHotKey" }, "DR_Sample_Type$HotKey");

                    b.HasIndex(new[] { "SamName" }, "DR_Sample_Type$Sample0")
                        .IsUnique()
                        .HasFilter("[Sam_Name] IS NOT NULL");

                    b.ToTable("DR_Sample_Type", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrStatType", b =>
                {
                    b.Property<string>("FirstDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("统计起始时间");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("项目类型");

                    b.Property<string>("LastDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("统计结束时间");

                    b.Property<string>("StatType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("统计类型");

                    b.Property<string>("TestSum")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("检验总数");

                    b.ToTable("DR_Stat_Type", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrSysLog", b =>
                {
                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Log_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogEvent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Log_Event");

                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Log_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("LogOperater")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Log_Operater");

                    b.Property<short?>("LogType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Log_Type")
                        .HasDefaultValueSql("((0))");

                    b.HasIndex(new[] { "LogDate" }, "DR_Sys_Log$Log_Date");

                    b.HasIndex(new[] { "LogType" }, "DR_Sys_Log$Log_Type");

                    b.ToTable("DR_Sys_Log", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrTestAll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Analysis")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((0))")
                        .HasComment("分析用的样本量");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("BatchID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CalType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte?>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("第几次测试");

                    b.Property<byte?>("CupType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("DilPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Dil_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释液位置");

                    b.Property<short?>("Diluent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释液量");

                    b.Property<bool?>("Dilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释");

                    b.Property<short?>("Disk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("盘号");

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0申请、1测试、2完成");

                    b.Property<int?>("Ise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ISE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("ISE");

                    b.Property<short?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("位置");

                    b.Property<short?>("Reg1Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg1Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂1位置");

                    b.Property<short?>("Reg1Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg1_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂1吸量");

                    b.Property<short?>("Reg2Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg2Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂2位置");

                    b.Property<short?>("Reg2Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg2_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂2吸量");

                    b.Property<short?>("Reg3Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg3Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂3位置");

                    b.Property<short?>("Reg3Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg3_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂3吸量");

                    b.Property<short?>("Reg4Dil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Dil")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("Reg4Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Pos")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂4位置");

                    b.Property<short?>("Reg4Vol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Reg4_Vol")
                        .HasDefaultValueSql("((0))")
                        .HasComment("试剂4吸量");

                    b.Property<short?>("Rerun")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试次数");

                    b.Property<string>("Sample")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((0))")
                        .HasComment("正常样本量");

                    b.Property<bool?>("SerumFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<byte?>("StdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("StdID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("标准液序号");

                    b.Property<byte?>("TestAutoFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("默认0 分类标志，默认0表示手工校准，自动分为定时校准1、批间校准或瓶间校准2；分类标志，默认0表示登记质控，做质控间隔时为1");

                    b.Property<DateTime?>("TestDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("日期");

                    b.Property<int?>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("排队序列号");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("测试项目名");

                    b.Property<string>("TestName1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TestNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本编号");

                    b.Property<int?>("TestOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("该项目在其它数据表的顺序编号");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("时间");

                    b.Property<short?>("TestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0、常规 1、急诊 2、质控 3、校准");

                    b.HasKey("Id")
                        .HasName("DR_Test_All$PrimaryKey");

                    b.HasIndex(new[] { "TestId", "Disk" }, "DR_Test_All$a");

                    b.HasIndex(new[] { "Position", "Disk", "TestType", "Flag" }, "DR_Test_All$b");

                    b.HasIndex(new[] { "Position", "TestType", "Disk" }, "DR_Test_All$c");

                    b.HasIndex(new[] { "TestDate", "Position", "TestType", "Disk" }, "DR_Test_All$d");

                    b.HasIndex(new[] { "TestType", "Disk", "TestDate" }, "DR_Test_All$e");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName", "Rerun" }, "DR_Test_All$f");

                    b.ToTable("DR_Test_All", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrTestApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Absorbance")
                        .HasColumnType("float");

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("CupBlank")
                        .HasColumnType("float");

                    b.Property<short?>("CupType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("杯类型");

                    b.Property<string>("DilSoluName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("Dilute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("稀释");

                    b.Property<short?>("Disk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("盘号");

                    b.Property<short?>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0申请、1测试、2完成");

                    b.Property<string>("Hint")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Ise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ISE")
                        .HasDefaultValueSql("((0))")
                        .HasComment("是否使用ISE。0不使用。1使用。");

                    b.Property<short?>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("位置");

                    b.Property<short?>("Print")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("是否复查该项目");

                    b.Property<double?>("ReAbsorbance")
                        .HasColumnType("float");

                    b.Property<double?>("ReCupBlank")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason");

                    b.Property<short?>("Rerun")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("测试次数");

                    b.Property<string>("RerunResult")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SampleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("SerumFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SerumResult")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("SsmaTimeStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("SSMA_TimeStamp");

                    b.Property<string>("TestCnName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TestDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(CONVERT([datetime],CONVERT([varchar],getdate(),(1)),(1)))")
                        .HasComment("日期");

                    b.Property<string>("TestName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("测试项目名");

                    b.Property<string>("TestName1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("TestNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本编号");

                    b.Property<string>("TestRange")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestResult")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TestTime")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("时间");

                    b.Property<short?>("TestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("0、常规 1、急诊");

                    b.Property<string>("TestUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short?>("VolType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))")
                        .HasComment("样本体积");

                    b.HasKey("Id")
                        .HasName("DR_Test_App$PrimaryKey");

                    b.HasIndex(new[] { "Flag", "Print" }, "DR_Test_App$Flag");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName" }, "DR_Test_App$a");

                    b.HasIndex(new[] { "TestDate", "TestNo", "TestName1" }, "DR_Test_App$b");

                    b.HasIndex(new[] { "TestResult" }, "DR_Test_App$testresult");

                    b.ToTable("DR_Test_App", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrTestName", b =>
                {
                    b.Property<short>("TesCode")
                        .HasColumnType("smallint")
                        .HasColumnName("Tes_Code");

                    b.Property<string>("TesEname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_EName");

                    b.Property<string>("TesHotKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_HotKey");

                    b.Property<string>("TesName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_Name");

                    b.Property<short?>("TesOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Tes_Order")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TesCode")
                        .HasName("DR_Test_Name$PrimaryKey");

                    b.HasIndex(new[] { "TesEname" }, "DR_Test_Name$EName");

                    b.HasIndex(new[] { "TesHotKey" }, "DR_Test_Name$HotKey");

                    b.HasIndex(new[] { "TesName" }, "DR_Test_Name$Name")
                        .IsUnique()
                        .HasFilter("[Tes_Name] IS NOT NULL");

                    b.HasIndex(new[] { "TesCode" }, "DR_Test_Name$Tes_Code")
                        .IsUnique();

                    b.ToTable("DR_Test_Name", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrTestNameOrder", b =>
                {
                    b.Property<int>("TesCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tes_Code");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TesCode"));

                    b.Property<string>("TesEname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_EName");

                    b.Property<string>("TesHotKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_HotKey");

                    b.Property<string>("TesName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tes_Name");

                    b.Property<short?>("TesOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Tes_Order")
                        .HasDefaultValueSql("((255))");

                    b.Property<int?>("TesType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Tes_Type")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TesCode")
                        .HasName("DR_Test_Name_Order$PrimaryKey");

                    b.HasIndex(new[] { "TesEname" }, "DR_Test_Name_Order$EName");

                    b.HasIndex(new[] { "TesHotKey" }, "DR_Test_Name_Order$HotKey");

                    b.ToTable("DR_Test_Name_Order", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrToHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BackInt1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BackInt2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BackStr1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BackStr2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HostFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Host_Flag")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("HostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Host_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("HostTestDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Host_TestDate");

                    b.Property<string>("HostTestTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Host_TestTime");

                    b.HasKey("Id")
                        .HasName("DR_ToHost$PrimaryKey");

                    b.HasIndex(new[] { "HostId" }, "DR_ToHost$Host_ID");

                    b.ToTable("DR_ToHost", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrWashCell", b =>
                {
                    b.Property<int>("CelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cel_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CelId"));

                    b.Property<string>("CelName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cel_Name")
                        .HasComment("测试项目");

                    b.Property<short?>("CelR1Volume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cel_R1_Volume")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R1针的清洁剂使用量");

                    b.Property<string>("CelR1WashType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cel_R1_WashType")
                        .HasComment("R1针的清洁剂类型");

                    b.Property<short?>("CelR2Volume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Cel_R2_Volume")
                        .HasDefaultValueSql("((0))")
                        .HasComment("R2针的清洁剂使用量");

                    b.Property<string>("CelR2WashType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Cel_R2_WashType")
                        .HasComment("R2针的清洁剂类型");

                    b.HasKey("CelId")
                        .HasName("DR_Wash_Cell$PrimaryKey");

                    b.HasIndex(new[] { "CelId" }, "DR_Wash_Cell$Cel_ID");

                    b.ToTable("DR_Wash_Cell", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrWashReagent", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pro_ID")
                        .HasComment("流水号");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"));

                    b.Property<string>("ProFromTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_From_Test")
                        .HasComment("从哪个试剂开始");

                    b.Property<string>("ProFromType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_From_Type")
                        .HasComment("试剂的类型");

                    b.Property<string>("ProName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pro_Name")
                        .HasComment("受影响的试剂针名字");

                    b.Property<string>("ProToTest")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_To_Test")
                        .HasComment("到哪个试剂结束");

                    b.Property<string>("ProToType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_To_Type")
                        .HasComment("试剂的类型");

                    b.Property<short?>("ProVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("Pro_Volume")
                        .HasDefaultValueSql("((0))")
                        .HasComment("清洁剂的使用量");

                    b.Property<string>("ProWashType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_Wash_Type")
                        .HasComment("清洁剂的种类");

                    b.HasKey("ProId")
                        .HasName("DR_Wash_Reagent$PrimaryKey");

                    b.ToTable("DR_Wash_Reagent", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrWashSample", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Pro_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"));

                    b.Property<string>("ProName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Pro_Name");

                    b.Property<string>("ProPosition")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Pro_Position");

                    b.HasKey("ProId")
                        .HasName("DR_Wash_Sample$PrimaryKey");

                    b.HasIndex(new[] { "ProName" }, "DR_Wash_Sample$a");

                    b.ToTable("DR_Wash_Sample", (string)null);
                });

            modelBuilder.Entity("monarch240.Models.DrWorkload", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("人员姓名或科室名称");

                    b.Property<string>("Total")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("工作量合计");

                    b.Property<int?>("Workload")
                        .HasColumnType("int")
                        .HasComment("工作量");

                    b.ToTable("DR_Workload", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
